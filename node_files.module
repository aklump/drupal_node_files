<?php
/**
 * @file
 * Base module file for node_files
 *
 * @defgroup node_files Node Documents & Files
 * @{
 */

/**
 * Implements hook_init().
 */
function node_files_settings($setting = NULL) {
  $settings = &drupal_static(__FUNCTION__, array());
  if (empty($settings)) {
    $settings = array(
      'token_type'  => 'document',
      'node_type'   => 'document',
      'field_name'  => 'field_document_files',
      'menu_item'   => 'documents/%node',
      'show_all'    => TRUE,
    );
    $settings['token_tree'] = array(
      'legend' => t('Tokens'),
      'types' => array($settings['token_type']),
      'collapsed' => TRUE,
    );
    drupal_alter('node_files_settings', $settings);
  }
  if ($setting === NULL) {
    return $settings;
  }

  return array_key_exists($setting, $settings) ? $settings[$setting] : NULL;
}

/**
 * Implements hook_permission().
 */
//function node_files_permission() {
//  return array(
//    'node_files:administer' => array(
//      'title' => t('Administer Node Documents & Files'),
//      'description' => t('Perform administration tasks for Node Documents & Files.'),
//    ),
//  );
//}

/**
 * Implements hook_menu().
 */
function node_files_menu() {
  $items = array();

  $items[node_files_settings('menu_item')] = array(
    'page callback' => 'node_files_redirect',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  //$items['admin/config/system/node-files'] = array(
  //  'title' => 'Node Documents & Files Settings',
  //  'description' => 'Administer module configuration settings',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('node_files_admin_settings'),
  //  'file' => 'includes/node_files.admin.inc',
  //  'access arguments' => array('administer node_files'),
  //  'type' => MENU_NORMAL_ITEM,
  //);

  return $items;
}

/**
 * Redirect to the exact filepath of a node
 */
function node_files_redirect($node, $delta = 0) {
  if (!($files = node_files_get_files($node))) {
    return MENU_NOT_FOUND;
  }
  if ($delta) {
    $delta--;
  }
  if (empty($files[$delta])) {
    return MENU_NOT_FOUND;
  }

  $url = file_create_url($files[$delta]['uri']);
  drupal_goto($url);
  drupal_exit();
}

/**
 * Implements hook_form_alter().
 */
function node_files_form_alter(&$form, $form_state, $form_id) {
  // Adds the token tree to the top of node forms
  $settings = node_files_settings();
  $exclude = array(
    $settings['node_type'],
  );

  if (substr($form_id, -10) === '_node_form'
      && !in_array($form['type']['#value'], $exclude)
      && (node_files_get_documents()
          || count($settings['token_tree']['types']) > 1)) {
    $token_type = node_files_settings('token_type');
    $form['token_tree'] = array(
      '#theme' => 'node_files_form_token_tree',
      '#token_types' => $settings['token_tree']['types'],
      '#legend' => $settings['token_tree']['legend'],
      '#collapsed' => $settings['token_tree']['collapsed'],
      '#weight' => empty($form['body']['#weight']) ? -50 : $form['body']['#weight'] - .1,
    );
  }
}

/**
 * Implements hook_theme().
 */
function node_files_theme($existing, $type, $theme, $path) {
  return array(
    'node_files_form_token_tree' => array(
      'variables' => array(
        'token_types' => NULL,
        'legend' => NULL,
        'collapsed' => TRUE,
      ),
    ),
  );
}

/**
 * Formats a token tree for node forms.
 *
 * @param array $vars
 *
 * @return string
 *
 * @ingroup themeable
 */
function theme_node_files_form_token_tree($vars) {
  $build = array();
  $build[] = array(
    '#theme' => 'token_tree',
    '#token_types' => $vars['token_types'],
    '#global_types' => FALSE,
  );
  $build[] = array('#markup' => l(t('Add a new document'), 'node/add/' . node_files_settings('node_type'), array(
    'query' => drupal_get_destination(),
  )));
  $class = array('node-files-form-token-tree', 'collapsible');
  if ($vars['collapsed']) {
    $class[] = 'collapsed';
  }
  $build = array(
    '#attributes' => array('class' => array('node-files-form-token-tree')),
    '#type' => 'fieldset',
    '#title' => $vars['legend'],
    '#attributes' => array(
      'class' => $class,
    ),
    '#attached' => array(
      'library' => array('system', 'drupal.collapse'),
      'css' => array(
        drupal_get_path('module', 'node_files') . '/node_files.css',
      ),
    ),
    $build,
  );

  //@todo fieldset does not appear collapsible in form; fix
  $output = drupal_render($build);

  return $output;
}

/**
 * Implements hook_token_info().
 */
function node_files_token_info() {
  $settings = node_files_settings();
  $token_type = $settings['token_type'];
  if (!($all_documents = node_files_get_documents(TRUE))) {
    return array();
  }
  $info = array(
    'types' => array(
      $token_type => array(
        'name' => t('Documents'),
        'description' => t('Document link tokens provided by the Node File & Documents module'),
      ),
    ),
  );

  if ($settings['show_all']) {
    foreach ($all_documents as $nid => $node) {
      $t_vars = array(
        '!url' => url('node/' . $nid . '/edit', array(
          'query' => drupal_get_destination(),
        )),
        '@title' => truncate_utf8($node->title, 22, TRUE),
        '@description' => $node->title,
      );
      $info['tokens'][$token_type][$nid] = array(
        'name' => t('<a href="!url">@title</a>', $t_vars),
        'description' => t('URL of @description', $t_vars),
      );
      $files = node_files_get_files($node);
      if (count($files) > 1) {
        for ($i = 1; $i <= count($files); ++$i) {
          $t_vars['@index'] = $i;
          $name = t('<a href="!url">@title #@index</a>', $t_vars);
          if ($i === 1) {
            $info['tokens'][$token_type][$nid] = array(
              'name' => $name,
              'description' => t('File #@index URL: @description', $t_vars),
            );
          }
          if (isset($files[$i - 1]['description'])) {
            $t_vars['@description'] = $files[$i - 1]['description'];
            $name = t('<a href="!url">@description</a>', $t_vars);
          }
          $info['tokens'][$token_type][$nid . '-' . $i] = array(
            'name' => $name,
            'description' => t('File #@index URL: @description', $t_vars),
          );
        }
      }
    }
  }
  else {
    $info['tokens'][$token_type]['NID'] = array(
      'name' => t('Document URL'),
      'description' => t("The absolute path to the first document in the node. Replace NID with the node document's node id."),
    );
    $info['tokens'][$token_type]['NID-NUMBER'] = array(
      'name' => t('Document URL'),
      'description' => t('The absolute path to the nth file in the document node where 1 is the first document. Replace NID and NUMBER with integars.'),
    );
  }

  return $info;
}

/**
 * Implements hook_node_insert().
 *
 * @param object $node
 */
function node_files_node_insert($node) {
  _node_files_rebuild($node);
}

/**
 * Implements hook_node_update().
 *
 * @param object $node
 */
function node_files_node_update($node) {
  _node_files_rebuild($node);
}

/**
 * Implements hook_node_delete().
 */
function node_files_node_delete($node) {
  _node_files_rebuild($node);
}

/**
 * Internal use only
 */
function _node_files_rebuild($node) {
  if ($node->type == node_files_settings('node_type')) {
    // flush the token cache to rebuild the token info
    token_clear_cache();
  }
}

/**
 * Return all published document nodes
 *
 * @param bool $loaded
 *   (Optional) Defaults to FALSE. When false the return array will be node
     titles, when true you will receive fully loaded nodes.

   @return array
 */
function node_files_get_documents($loaded = FALSE) {
  $nodes = &drupal_static(__FUNCTION__, array());
  $key = (int) $loaded;
  if (!array_key_exists($key, $nodes)) {
    $nodes[0] = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('type', node_files_settings('node_type'))
      ->condition('status', '1')
      ->addTag('node_access')
      ->execute()->fetchAllKeyed();
    if ($loaded) {
      $nodes[1] = node_load_multiple(array_keys($nodes[0]));
    }
  }

  return $nodes[$key];
}

/**
 * Implements hook_tokens().
 *
 * @param string $type The machine-readable name of the type (group) of token
 * being replaced, such as 'node', 'user', or another type defined by a
 * hook_token_info() implementation.
 * @param array $tokens An array of tokens to be replaced. The keys are the
 * machine-readable token names, and the values are the raw [type:token] strings
 * that appeared in the original text.
 * @param array $data (optional) An associative array of data objects to be used
 * when generating replacement values, as supplied in the $data parameter to
 * token_replace().
 * @param array $options (optional) An associative array of options for token
 * replacement; see token_replace() for possible values.
 *
 * @return array
 * - An associative array of replacement values, keyed by the raw [type:token]
 * strings from the original text.
 */
function node_files_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $token_type = node_files_settings('token_type');
  $replacements = array();
  if ($type == $token_type) {
    foreach (array_keys($tokens) as $key) {
      if (!($matches = explode("-", $key))
            || empty($matches[0])
            || !($node = node_load($matches[0]))) {
        continue;
      }
      $files  = node_files_get_files($node);
      $multiple = count($files) > 1;
      foreach ($files as $key => $value) {
        if (empty($value['uri'])) {
          continue;
        }
        $url = node_files_settings('menu_item');
        $url = str_replace('%node', $node->nid, $url);
        if ($key == 0) {
          $replacements['[' . $token_type . ':' . $node->nid . ']'] = $url;
        }
        $delta = $key + 1;
        $replacements['[' . $token_type . ':' . $node->nid . '-' . $delta . ']'] = $url . '/' . $delta;
      }
    }
  }

  return $replacements;
}

/**
 * Return the files by document node.
 *
 * @param object $node
 *
 * @return array
 */
function node_files_get_files($node) {
  $files = &drupal_static(__FUNCTION__, array());
  if (!array_key_exists($node->nid, $files)) {
    $field_name = node_files_settings('field_name');
    $files[$node->nid] = field_get_items('node', $node, $field_name);
  }

  return $files[$node->nid];
}
